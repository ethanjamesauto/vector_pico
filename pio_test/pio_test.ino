// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //
#include "hardware/pio.h"

// ----- //
// hello //
// ----- //

#define hello_wrap_target 0
#define hello_wrap 0

static const uint16_t hello_program_instructions[] = {
            //     .wrap_target
    0x6000, //  0: out    pins, 32                   
            //     .wrap
};

static const struct pio_program hello_program = {
    .instructions = hello_program_instructions,
    .length = 1,
    .origin = -1,
};

static inline pio_sm_config hello_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + hello_wrap_target, offset + hello_wrap);
    return c;
}

static inline void hello_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = hello_program_get_default_config(offset);
    // Map the state machine's OUT pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_out_pins(&c, pin, 2);
    sm_config_set_out_shift(&c, true, true, 32);
    sm_config_set_clkdiv(&c, 133e6 / (2564 * 2));
    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);
    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, true);
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}

void setup() {
    gpio_set_function(14, GPIO_FUNC_PIO0);
    gpio_set_function(15, GPIO_FUNC_PIO0);
    uint offset = pio_add_program(pio0, &hello_program);
    hello_program_init(pio0, 0, offset, 14);
}
void loop() {
    static uint32_t thing = 0;
    pio_sm_put_blocking(pio0, 0, thing++ % 4);
}