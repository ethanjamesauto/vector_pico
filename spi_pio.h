// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#include "hardware/pio.h"

// ------------ //
// spi_cpha0_cs //
// ------------ //

#define spi_cpha0_cs_wrap_target 0
#define spi_cpha0_cs_wrap 3

#define spi_cpha0_cs_offset_entry_point 3u

// This is a modified version of an official example for full-duplex SPI.
// It runs at twice the speed of the example and is half-duplex.
// The slave should sample data on the rising edge of the clock (cpha0)

static const uint16_t spi_cpha0_cs_program_instructions[] = {
            //     .wrap_target
    0x6001, //  0: out    pins, 1         side 0     
    0x1040, //  1: jmp    x--, 0          side 2     
    0xa022, //  2: mov    x, y            side 0     
    0x88e0, //  3: pull   ifempty block   side 1     
            //     .wrap
};

static const struct pio_program spi_cpha0_cs_program = {
    .instructions = spi_cpha0_cs_program_instructions,
    .length = 4,
    .origin = -1,
};

static inline pio_sm_config spi_cpha0_cs_program_get_default_config(uint offset)
{
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + spi_cpha0_cs_wrap_target, offset + spi_cpha0_cs_wrap);
    sm_config_set_sideset(&c, 2, false, false);
    return c;
}

#include "hardware/gpio.h"

static inline void pio_spi_cs_init(PIO pio, uint sm, uint prog_offs, uint n_bits, float clkdiv, bool cpol,
    uint pin_sck, uint pin_mosi)
{
    pio_sm_config c = spi_cpha0_cs_program_get_default_config(prog_offs);
    sm_config_set_out_pins(&c, pin_mosi, 1);
    sm_config_set_sideset_pins(&c, pin_sck);
    sm_config_set_out_shift(&c, false, true, 32);
    sm_config_set_clkdiv(&c, clkdiv);

    pio_sm_set_pins_with_mask(pio, sm, (2u << pin_sck), (3u << pin_sck) | (1u << pin_mosi));
    pio_sm_set_pindirs_with_mask(pio, sm, (3u << pin_sck) | (1u << pin_mosi), (3u << pin_sck) | (1u << pin_mosi));
    pio_gpio_init(pio, pin_mosi);
    pio_gpio_init(pio, pin_sck);
    pio_gpio_init(pio, pin_sck + 1);

    uint entry_point = prog_offs + spi_cpha0_cs_offset_entry_point;
    pio_sm_init(pio, sm, entry_point, &c);
    pio_sm_exec(pio, sm, pio_encode_set(pio_x, n_bits - 1));
    pio_sm_exec(pio, sm, pio_encode_set(pio_y, n_bits - 1));
    pio_sm_set_enabled(pio, sm, true);
}
/*
void setup()
{
    gpio_set_function(14, GPIO_FUNC_PIO0);
    gpio_set_function(15, GPIO_FUNC_PIO0);
    gpio_set_function(16, GPIO_FUNC_PIO0);
    gpio_set_function(17, GPIO_FUNC_PIO0);
    uint offset = pio_add_program(pio0, &spi_cpha0_cs_program);
    pio_spi_cs_init(pio0, 0, offset, 16, 133e6 / (20e6 * 2), false, 14, 16);
    noInterrupts();
    pio_dma_init(pio0, 0);
}*/
